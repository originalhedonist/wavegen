#pragma once
#include "headerdata.h"
#include "exprtk.hpp"
#include "channelfunction.h"
#include "MixinFunction.h"
#include "NormalizeFunction.h"
#include "FrequencyFunctionWaveFileOrGroup.h"
#include "RandomSequencePassFilterFunction.h"

class FrequencyFunctionWaveFile : public FrequencyFunctionWaveFileOrGroup
{
public:
    static int nextid;
    int id = nextid++;

    channelfunction* thechannelfunction;
    mixinfunction themixinfunction;
    normalizefunction thenormalizefunction;
    randomsequencepassfilterfunction therandomsequencepassfilterfunction;

    FrequencyFunctionWaveFile(const nlohmann::json j, const std::map<std::string, double>& constants, double channel, const headerdata& h, channelfunction* thechannelfunction, bool calculationOnly);
    FrequencyFunctionWaveFile(const FrequencyFunctionWaveFile& other);

    bool initialized;
    bool calculationOnly;
    double startTime; // don't process it before this time. optimization for Breaks2 file (json autogenerated from numbers)
    double endTime; // don't process it after this time. optimization for Breaks2
    bool everFiltered;
    exprtk::symbol_table<double> symbol_table_frequency;
    exprtk::symbol_table<double> symbol_table_pulse;
    exprtk::expression<double> expression_frequency;
    exprtk::expression<double> expression_pulse;

    void compile(const std::string& description, const std::string& expression_string, exprtk::symbol_table<double> symbol_table   /* invokes copy constructor */, exprtk::expression<double>& expression);

    std::string frequency, pulse;
    static std::string get_expression(const std::string& expression);
    static std::vector<std::string> get_missing_variables(exprtk::symbol_table<double> symbol_table, const std::string& expression);
    static double randomdouble();
    static double randomdoublebetween(double bottom, double top);
    static double sinorcos(double index, double arg);

    static void make_substitutions(std::string& input, const std::string& substitutions);
    static void replace_all(std::string& str, const std::string& from, const std::string& to);

    headerdata h;
    void initialize();
    double *t, *tprev, *n, *x, *xprev, *f;
    double *gradient, *gradientprev;
    double channelindex;

    std::map<std::string, double*> variables;
    std::map<std::string, double> _constants;

    double aLast;
    virtual ~FrequencyFunctionWaveFile();
    double Amplitude(double t, int32_t n);
    double Frequency();
    bool shouldCalculateForTime(const double& t);
};
